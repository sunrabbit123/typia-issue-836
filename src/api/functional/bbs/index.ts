/**
 * @packageDocumentation
 * @module api.functional.bbs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { TestBody } from "../../structures/bbs/Test";
import { NestiaSimulator } from "../../utils/NestiaSimulator";

/**
 * Store a new article.
 * 
 * Store a new article and returns its detailed record info.
 * 
 * @returns Newly created article info
 * 
 * @controller BbsArticlesController.store
 * @path POST /bbs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
    connection: IConnection,
    a: TestBody,
): Promise<store.Output> {
    return !!connection.simulate
        ? store.simulate(
              connection,
              a,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...store.METADATA,
                  path: store.path(),
              } as const,
              a,
          );
}
export namespace store {
    export type Input = TestBody;
    export type Output = TestBody;

    export const METADATA = {
        method: "POST",
        path: "/bbs",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/bbs`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): TestBody =>
        typia.random<TestBody>(g);
    export const simulate = async (
        connection: IConnection,
        a: store.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(a));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}